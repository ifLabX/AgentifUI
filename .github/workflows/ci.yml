name: CI/CD Pipeline

on:
  pull_request:
    branches: [ master, main, develop ]
  push:
    branches: [ master, main ]
  workflow_dispatch:

# Cancel previous runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  # Check if files have changed to skip unnecessary jobs
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      source: ${{ steps.filter.outputs.source }}
      config: ${{ steps.filter.outputs.config }}
      i18n: ${{ steps.filter.outputs.i18n }}
      styles: ${{ steps.filter.outputs.styles }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            source:
              - 'app/**/*.{ts,tsx,js,jsx}'
              - 'components/**/*.{ts,tsx,js,jsx}'
              - 'lib/**/*.{ts,tsx,js,jsx}'
              - 'middleware.ts'
              - '*.{ts,tsx,js,jsx}'
            config:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'tsconfig.json'
              - 'next.config.ts'
              - 'tailwind.config.js'
              - 'eslint.config.mjs'
              - 'commitlint.config.mjs'
              - 'postcss.config.mjs'
              - '.prettierrc.json'
              - '.prettierignore'
            i18n:
              - 'messages/**/*.json'
              - 'i18n/**/*.{ts,js}'
              - 'scripts/**/*i18n*'
            styles:
              - 'styles/**/*.css'
              - 'app/globals.css'

  # Install dependencies and cache them
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.source == 'true' || needs.changes.outputs.config == 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

  # Code formatting and linting checks
  format-and-lint:
    name: Format and Lint Check
    runs-on: ubuntu-latest
    needs: [changes, install]
    if: needs.changes.outputs.source == 'true' || needs.changes.outputs.config == 'true' || needs.changes.outputs.styles == 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check code formatting
        run: pnpm run format:check

      # Temporarily disabled for development flexibility
      # - name: Run ESLint
      #   run: pnpm run lint
      
      - name: Skip ESLint checks (temporarily disabled)
        run: echo "⚠️ ESLint checks temporarily disabled for development flexibility"

  # TypeScript type checking
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: [changes, install]
    if: needs.changes.outputs.source == 'true' || needs.changes.outputs.config == 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type check
        run: pnpm run type-check

  # Internationalization validation
  i18n-validation:
    name: I18n Validation
    runs-on: ubuntu-latest
    needs: [changes, install]
    if: needs.changes.outputs.i18n == 'true' || needs.changes.outputs.source == 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Quick i18n check
        run: pnpm run i18n:check

      - name: Validate i18n consistency
        run: pnpm run i18n:validate

  # Build the application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [changes, install]
    if: needs.changes.outputs.source == 'true' || needs.changes.outputs.config == 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build
        env:
          # Provide dummy environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: https://dummy.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: dummy_key_for_build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  # Security checks
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: [changes, install]
    if: needs.changes.outputs.source == 'true' || needs.changes.outputs.config == 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run dependency audit
        run: pnpm audit --audit-level=moderate

      - name: Scan for secrets
        run: |
          echo "Scanning for hardcoded secrets..."
          # Check for potential secrets in source code
          if grep -r -i -E "(api_key|apikey|secret|token|password)\s*[:=]\s*['\"][a-zA-Z0-9+/]{20,}['\"]" \
             --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
             app components lib | grep -v -E "(placeholder|example|test|demo|sample|mock|dummy)"; then
            echo "⚠️ Potential hardcoded secret detected"
            exit 1
          fi
          echo "✅ No hardcoded secrets found"

  # Final status check - all jobs must pass
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: 
      - changes
      - format-and-lint
      - type-check
      - i18n-validation
      - build
      - security-check
    if: always()
    permissions:
      contents: read
    steps:
      - name: Check all jobs status
        run: |
          echo "Checking CI pipeline status..."
          
          # Check if any job failed (lint checks temporarily disabled)
          if [[ "${{ needs.type-check.result }}" == "failure" ]] || \
             [[ "${{ needs.i18n-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]] || \
             [[ "${{ needs.security-check.result }}" == "failure" ]]; then
            echo "❌ CI pipeline failed"
            exit 1
          fi
          
          # Note: format-and-lint checks are temporarily disabled
          echo "ℹ️ Note: Lint and format checks are temporarily disabled"
          
          # Check if any required job was skipped when it shouldn't be
          if [[ "${{ needs.changes.outputs.source }}" == "true" ]] || [[ "${{ needs.changes.outputs.config }}" == "true" ]]; then
            if [[ "${{ needs.type-check.result }}" == "skipped" ]] || \
               [[ "${{ needs.build.result }}" == "skipped" ]] || \
               [[ "${{ needs.security-check.result }}" == "skipped" ]]; then
              echo "❌ Required job was skipped"
              exit 1
            fi
          fi
          
          echo "✅ All CI checks passed successfully" 