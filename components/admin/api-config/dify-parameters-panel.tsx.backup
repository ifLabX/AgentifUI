'use client';

import React, { useState, useEffect } from 'react';
import { useTheme } from '@lib/hooks/use-theme';
import { cn } from '@lib/utils';
import type { DifyParametersSimplifiedConfig, DifyFileUploadConfig } from '@lib/types/dify-parameters';
import {
  X,
  Settings,
  MessageSquare,
  Upload,
  Plus,
  Trash2,
  ChevronDown,
  ChevronRight,
  Sparkles,
  Image,
  Save,
  RotateCcw,
  FileText,
  Globe
} from 'lucide-react';

interface DifyParametersPanelProps {
  isOpen: boolean;
  onClose: () => void;
  config: DifyParametersSimplifiedConfig;
  onSave: (config: DifyParametersSimplifiedConfig) => void;
  instanceName?: string;
}

const DifyParametersPanel: React.FC<DifyParametersPanelProps> = ({
  isOpen,
  onClose,
  config,
  onSave,
  instanceName = '应用实例'
}) => {
  const { isDark } = useTheme();
  const [localConfig, setLocalConfig] = useState<DifyParametersSimplifiedConfig>(config);
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['basic', 'questions', 'upload']));
  const [hasChanges, setHasChanges] = useState(false);

  useEffect(() => {
    setLocalConfig(config);
    setHasChanges(false);
  }, [config]);

  useEffect(() => {
    const configChanged = JSON.stringify(localConfig) !== JSON.stringify(config);
    setHasChanges(configChanged);
  }, [localConfig, config]);

  const toggleSection = (section: string) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(section)) {
      newExpanded.delete(section);
    } else {
      newExpanded.add(section);
    }
    setExpandedSections(newExpanded);
  };

  const updateConfig = (path: string, value: any) => {
    setLocalConfig(prev => {
      const newConfig = { ...prev };
      const keys = path.split('.');
      let current: any = newConfig;
      
      for (let i = 0; i < keys.length - 1; i++) {
        if (!current[keys[i]]) {
          current[keys[i]] = {};
        }
        current = current[keys[i]];
      }
      
      current[keys[keys.length - 1]] = value;
      return newConfig;
    });
  };

  const addSuggestedQuestion = () => {
    const questions = localConfig.suggested_questions || [];
    updateConfig('suggested_questions', [...questions, '']);
  };

  const updateSuggestedQuestion = (index: number, value: string) => {
    const questions = localConfig.suggested_questions || [];
    const newQuestions = [...questions];
    newQuestions[index] = value;
    updateConfig('suggested_questions', newQuestions);
  };

  const removeSuggestedQuestion = (index: number) => {
    const questions = localConfig.suggested_questions || [];
    const newQuestions = questions.filter((_, i) => i !== index);
    updateConfig('suggested_questions', newQuestions);
  };

  const handleSave = () => {
    onSave(localConfig);
    setHasChanges(false);
  };

  const handleReset = () => {
    setLocalConfig(config);
    setHasChanges(false);
  };

  if (!isOpen) return null;

  return (
    <>
      {/* 背景遮罩 */}
      <div 
        className={cn(
          "fixed inset-0 z-50 transition-all duration-300",
          "bg-gradient-to-br from-black/20 via-black/10 to-black/20",
          "backdrop-blur-sm",
          isOpen ? "opacity-100" : "opacity-0 pointer-events-none"
        )}
        onClick={onClose}
      />
      
      {/* 侧边栏 */}
      <div className={cn(
        "fixed right-0 top-0 bottom-0 w-[480px] z-50",
        "transform transition-all duration-500 ease-out",
        isOpen ? "translate-x-0" : "translate-x-full"
      )}>
        <div className={cn(
          "h-full flex flex-col relative",
          "backdrop-blur-xl border-l shadow-2xl",
          isDark 
            ? "bg-gradient-to-b from-stone-900/95 via-stone-900/98 to-stone-900/95 border-stone-700" 
            : "bg-gradient-to-b from-white/95 via-white/98 to-white/95 border-stone-200"
        )}>
          {/* 装饰性渐变条 */}
          <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-500 via-purple-500 to-green-500" />
          
          {/* 头部 */}
          <div className={cn(
            "flex items-center justify-between p-6 border-b relative",
            isDark ? "border-stone-700" : "border-stone-200"
          )}>
            {/* 背景装饰 */}
            <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-transparent" />
            
            <div className="flex items-center gap-3 relative z-10">
              <div className={cn(
                "p-2 rounded-xl relative overflow-hidden",
                "bg-gradient-to-br",
                isDark ? "from-blue-500/20 to-purple-500/20" : "from-blue-50 to-purple-50"
              )}>
                {/* 图标背景光效 */}
                <div className="absolute inset-0 bg-gradient-to-br from-blue-400/20 to-purple-400/20 animate-pulse" />
                <Settings className={cn(
                  "h-5 w-5 relative z-10",
                  isDark ? "text-blue-400" : "text-blue-600"
                )} />
              </div>
              <div>
                <h2 className={cn(
                  "text-lg font-bold font-serif bg-gradient-to-r bg-clip-text text-transparent",
                  isDark 
                    ? "from-stone-100 to-stone-300" 
                    : "from-stone-900 to-stone-700"
                )}>
                  Dify 参数配置
                </h2>
                <p className={cn(
                  "text-sm font-serif",
                  isDark ? "text-stone-400" : "text-stone-600"
                )}>
                  {instanceName}
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className={cn(
                "p-2 rounded-xl transition-all duration-200 relative z-10",
                "hover:scale-110 hover:rotate-90",
                isDark 
                  ? "hover:bg-stone-800 text-stone-400 hover:text-stone-200" 
                  : "hover:bg-stone-100 text-stone-600 hover:text-stone-900"
              )}
            >
              <X className="h-5 w-5" />
            </button>
          </div>

          {/* 内容区域 */}
          <div className="flex-1 overflow-y-auto">
            <div className="p-6 space-y-6">
              {/* 基础配置 - 开场白 */}
              <div className="space-y-4">
                <button
                  onClick={() => toggleSection('basic')}
                  className={cn(
                    "w-full flex items-center gap-3 p-4 rounded-2xl transition-all duration-300",
                    "group hover:scale-[1.02] hover:shadow-lg relative overflow-hidden",
                    isDark 
                      ? "bg-gradient-to-r from-stone-800/50 to-stone-800/30 hover:from-stone-800 hover:to-stone-700" 
                      : "bg-gradient-to-r from-stone-50 to-stone-50/50 hover:from-stone-100 hover:to-stone-50"
                  )}
                >
                  {/* 按钮背景光效 */}
                  <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-transparent to-blue-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                  
                  <div className={cn(
                    "p-2 rounded-xl transition-all duration-300 relative z-10",
                    "bg-gradient-to-br group-hover:scale-110",
                    isDark ? "from-blue-500/20 to-blue-600/30 group-hover:from-blue-500/30 group-hover:to-blue-600/40" : "from-blue-50 to-blue-100 group-hover:from-blue-100 group-hover:to-blue-200"
                  )}>
                    <MessageSquare className={cn(
                      "h-4 w-4 transition-colors duration-300",
                      isDark ? "text-blue-400 group-hover:text-blue-300" : "text-blue-600 group-hover:text-blue-700"
                    )} />
                  </div>
                  <span className={cn(
                    "flex-1 text-left font-medium font-serif relative z-10",
                    isDark ? "text-stone-200 group-hover:text-stone-100" : "text-stone-800 group-hover:text-stone-900"
                  )}>
                    开场白配置
                  </span>
                  <div className="relative z-10">
                    {expandedSections.has('basic') ? (
                      <ChevronDown className="h-4 w-4 text-stone-400 transition-transform duration-300 group-hover:text-blue-500" />
                    ) : (
                      <ChevronRight className="h-4 w-4 text-stone-400 transition-transform duration-300 group-hover:text-blue-500" />
                    )}
                  </div>
                </button>

                {expandedSections.has('basic') && (
                  <div className="ml-6 space-y-4 animate-in slide-in-from-top-2 duration-300">
                    <div>
                      <label className={cn(
                        "block text-sm font-medium mb-2 font-serif",
                        isDark ? "text-stone-300" : "text-stone-700"
                      )}>
                        开场白 (opening_statement)
                      </label>
                      <div className="relative">
                        <textarea
                          value={localConfig.opening_statement || ''}
                          onChange={(e) => updateConfig('opening_statement', e.target.value)}
                          className={cn(
                            "w-full px-4 py-3 rounded-2xl border font-serif",
                            "transition-all duration-300 resize-none",
                            "focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 focus:scale-[1.02]",
                            "hover:shadow-md",
                            isDark 
                              ? "bg-stone-800/50 border-stone-600 text-stone-100 placeholder-stone-400" 
                              : "bg-white border-stone-300 text-stone-900 placeholder-stone-500"
                          )}
                          placeholder="输入应用的开场白..."
                          rows={4}
                        />
                        {/* 输入框装饰 */}
                        <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 via-transparent to-purple-500/5 pointer-events-none opacity-0 hover:opacity-100 transition-opacity duration-300" />
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* 推荐问题 */}
              <div className="space-y-4">
                <button
                  onClick={() => toggleSection('questions')}
                  className={cn(
                    "w-full flex items-center gap-3 p-4 rounded-2xl transition-all duration-300",
                    "group hover:scale-[1.02] hover:shadow-lg relative overflow-hidden",
                    isDark 
                      ? "bg-gradient-to-r from-stone-800/50 to-stone-800/30 hover:from-stone-800 hover:to-stone-700" 
                      : "bg-gradient-to-r from-stone-50 to-stone-50/50 hover:from-stone-100 hover:to-stone-50"
                  )}
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 via-transparent to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                  
                  <div className={cn(
                    "p-2 rounded-xl transition-all duration-300 relative z-10",
                    "bg-gradient-to-br group-hover:scale-110",
                    isDark ? "from-purple-500/20 to-purple-600/30 group-hover:from-purple-500/30 group-hover:to-purple-600/40" : "from-purple-50 to-purple-100 group-hover:from-purple-100 group-hover:to-purple-200"
                  )}>
                    <Sparkles className={cn(
                      "h-4 w-4 transition-colors duration-300",
                      isDark ? "text-purple-400 group-hover:text-purple-300" : "text-purple-600 group-hover:text-purple-700"
                    )} />
                  </div>
                  <span className={cn(
                    "flex-1 text-left font-medium font-serif relative z-10",
                    isDark ? "text-stone-200 group-hover:text-stone-100" : "text-stone-800 group-hover:text-stone-900"
                  )}>
                    推荐问题 (suggested_questions)
                  </span>
                  <div className={cn(
                    "px-2 py-1 rounded-full text-xs font-medium relative z-10 transition-all duration-300",
                    "group-hover:scale-110",
                    isDark ? "bg-purple-500/20 text-purple-400 group-hover:bg-purple-500/30" : "bg-purple-100 text-purple-600 group-hover:bg-purple-200"
                  )}>
                    {localConfig.suggested_questions?.length || 0}
                  </div>
                  <div className="relative z-10">
                    {expandedSections.has('questions') ? (
                      <ChevronDown className="h-4 w-4 text-stone-400 transition-transform duration-300 group-hover:text-purple-500" />
                    ) : (
                      <ChevronRight className="h-4 w-4 text-stone-400 transition-transform duration-300 group-hover:text-purple-500" />
                    )}
                  </div>
                </button>

                {expandedSections.has('questions') && (
                  <div className="ml-6 space-y-3 animate-in slide-in-from-top-2 duration-300">
                    {(localConfig.suggested_questions || []).map((question, index) => (
                      <div key={index} className="flex gap-2 group">
                        <div className="flex-1 relative">
                          <input
                            type="text"
                            value={question}
                            onChange={(e) => updateSuggestedQuestion(index, e.target.value)}
                            className={cn(
                              "w-full px-4 py-2 rounded-xl border font-serif",
                              "transition-all duration-200",
                              "focus:ring-2 focus:ring-purple-500/20 focus:border-purple-500 focus:scale-[1.02]",
                              "hover:shadow-md",
                              isDark 
                                ? "bg-stone-800/50 border-stone-600 text-stone-100 placeholder-stone-400" 
                                : "bg-white border-stone-300 text-stone-900 placeholder-stone-500"
                            )}
                            placeholder={`推荐问题 ${index + 1}`}
                          />
                          <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-purple-500/5 via-transparent to-purple-500/5 pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                        </div>
                        <button
                          onClick={() => removeSuggestedQuestion(index)}
                          className={cn(
                            "p-2 rounded-xl transition-all duration-200",
                            "hover:bg-red-500/10 text-red-500 hover:scale-110 hover:rotate-12"
                          )}
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      </div>
                    ))}
                    
                    <button
                      onClick={addSuggestedQuestion}
                      className={cn(
                        "w-full flex items-center justify-center gap-2 p-4 rounded-xl",
                        "border-2 border-dashed transition-all duration-300",
                        "hover:scale-[1.02] hover:shadow-lg group relative overflow-hidden",
                        isDark 
                          ? "border-stone-600 hover:border-purple-500/50 hover:bg-purple-500/5" 
                          : "border-stone-300 hover:border-purple-500/50 hover:bg-purple-50"
                      )}
                    >
                      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 via-transparent to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                      <Plus className="h-4 w-4 text-purple-500 transition-transform duration-300 group-hover:rotate-90" />
                      <span className={cn(
                        "font-medium font-serif relative z-10",
                        isDark ? "text-stone-300 group-hover:text-stone-200" : "text-stone-700 group-hover:text-stone-800"
                      )}>
                        添加推荐问题
                      </span>
                    </button>
                  </div>
                )}
              </div>

              {/* 文件上传配置 */}
              <div className="space-y-4">
                <button
                  onClick={() => toggleSection('upload')}
                  className={cn(
                    "w-full flex items-center gap-3 p-4 rounded-2xl transition-all duration-300",
                    "group hover:scale-[1.02] hover:shadow-lg relative overflow-hidden",
                    isDark 
                      ? "bg-gradient-to-r from-stone-800/50 to-stone-800/30 hover:from-stone-800 hover:to-stone-700" 
                      : "bg-gradient-to-r from-stone-50 to-stone-50/50 hover:from-stone-100 hover:to-stone-50"
                  )}
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-green-500/5 via-transparent to-green-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                  
                  <div className={cn(
                    "p-2 rounded-xl transition-all duration-300 relative z-10",
                    "bg-gradient-to-br group-hover:scale-110",
                    isDark ? "from-green-500/20 to-green-600/30 group-hover:from-green-500/30 group-hover:to-green-600/40" : "from-green-50 to-green-100 group-hover:from-green-100 group-hover:to-green-200"
                  )}>
                    <Upload className={cn(
                      "h-4 w-4 transition-colors duration-300",
                      isDark ? "text-green-400 group-hover:text-green-300" : "text-green-600 group-hover:text-green-700"
                    )} />
                  </div>
                  <span className={cn(
                    "flex-1 text-left font-medium font-serif relative z-10",
                    isDark ? "text-stone-200 group-hover:text-stone-100" : "text-stone-800 group-hover:text-stone-900"
                  )}>
                    文件上传配置 (file_upload)
                  </span>
                  <div className={cn(
                    "w-3 h-3 rounded-full transition-all duration-300 relative z-10",
                    "group-hover:scale-125",
                    localConfig.file_upload?.image?.enabled 
                      ? "bg-green-500 shadow-lg shadow-green-500/50" 
                      : isDark ? "bg-stone-600" : "bg-stone-300"
                  )} />
                  <div className="relative z-10">
                    {expandedSections.has('upload') ? (
                      <ChevronDown className="h-4 w-4 text-stone-400 transition-transform duration-300 group-hover:text-green-500" />
                    ) : (
                      <ChevronRight className="h-4 w-4 text-stone-400 transition-transform duration-300 group-hover:text-green-500" />
                    )}
                  </div>
                </button>

                {expandedSections.has('upload') && (
                  <div className="ml-6 space-y-4 animate-in slide-in-from-top-2 duration-300">
                    {/* 图片上传配置 */}
                    <div className="space-y-4">
                      <div className="flex items-center justify-between p-4 rounded-xl bg-gradient-to-r from-green-500/5 to-transparent">
                        <div className="flex items-center gap-3">
                          <div className={cn(
                            "p-2 rounded-lg",
                            isDark ? "bg-green-500/20" : "bg-green-100"
                          )}>
                            <Image className={cn(
                              "h-4 w-4",
                              isDark ? "text-green-400" : "text-green-600"
                            )} />
                          </div>
                          <div>
                            <span className={cn(
                              "font-medium font-serif block",
                              isDark ? "text-stone-200" : "text-stone-800"
                            )}>
                              图片上传 (image)
                            </span>
                            <span className={cn(
                              "text-xs font-serif",
                              isDark ? "text-stone-400" : "text-stone-600"
                            )}>
                              支持格式：png, jpg, jpeg, webp, gif
                            </span>
                          </div>
                        </div>
                        <button
                          onClick={() => updateConfig('file_upload.image.enabled', !localConfig.file_upload?.image?.enabled)}
                          className={cn(
                            "relative w-12 h-6 rounded-full transition-all duration-300",
                            "hover:scale-110 focus:outline-none focus:ring-2 focus:ring-green-500/20",
                            localConfig.file_upload?.image?.enabled 
                              ? "bg-green-500 shadow-lg shadow-green-500/30" 
                              : isDark ? "bg-stone-600" : "bg-stone-300"
                          )}
                        >
                          <div className={cn(
                            "absolute top-0.5 w-5 h-5 rounded-full bg-white transition-all duration-300",
                            "shadow-md",
                            localConfig.file_upload?.image?.enabled ? "translate-x-6" : "translate-x-0.5"
                          )} />
                        </button>
                      </div>

                      {localConfig.file_upload?.image?.enabled && (
                        <div className="space-y-4 animate-in slide-in-from-top-2 duration-300">
                          <div>
                            <label className={cn(
                              "block text-sm font-medium mb-2 font-serif",
                              isDark ? "text-stone-300" : "text-stone-700"
                            )}>
                              图片数量限制 (number_limits)
                            </label>
                            <div className="relative">
                              <input
                                type="number"
                                min="1"
                                max="10"
                                value={localConfig.file_upload?.image?.number_limits || 3}
                                onChange={(e) => updateConfig('file_upload.image.number_limits', parseInt(e.target.value))}
                                className={cn(
                                  "w-full px-4 py-2 rounded-xl border font-serif",
                                  "transition-all duration-300",
                                  "focus:ring-2 focus:ring-green-500/20 focus:border-green-500 focus:scale-[1.02]",
                                  "hover:shadow-md",
                                  isDark 
                                    ? "bg-stone-800/50 border-stone-600 text-stone-100" 
                                    : "bg-white border-stone-300 text-stone-900"
                                )}
                              />
                              <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-green-500/5 via-transparent to-green-500/5 pointer-events-none opacity-0 hover:opacity-100 transition-opacity duration-300" />
                            </div>
                          </div>

                          <div>
                            <label className={cn(
                              "block text-sm font-medium mb-2 font-serif",
                              isDark ? "text-stone-300" : "text-stone-700"
                            )}>
                              传递方式 (transfer_methods)
                            </label>
                            <div className="space-y-2">
                              <div className="flex items-center gap-3">
                                <input
                                  type="checkbox"
                                  id="remote_url"
                                  checked={localConfig.file_upload?.image?.transfer_methods?.includes('remote_url') || false}
                                  onChange={(e) => {
                                    const currentMethods = localConfig.file_upload?.image?.transfer_methods || [];
                                    const newMethods = e.target.checked 
                                      ? [...currentMethods.filter(m => m !== 'remote_url'), 'remote_url']
                                      : currentMethods.filter(m => m !== 'remote_url');
                                    updateConfig('file_upload.image.transfer_methods', newMethods);
                                  }}
                                  className="rounded border-stone-300"
                                />
                                <label htmlFor="remote_url" className={cn(
                                  "text-sm font-serif flex items-center gap-2",
                                  isDark ? "text-stone-300" : "text-stone-700"
                                )}>
                                  <Globe className="h-4 w-4" />
                                  远程URL (remote_url)
                                </label>
                              </div>
                              <div className="flex items-center gap-3">
                                <input
                                  type="checkbox"
                                  id="local_file"
                                  checked={localConfig.file_upload?.image?.transfer_methods?.includes('local_file') || false}
                                  onChange={(e) => {
                                    const currentMethods = localConfig.file_upload?.image?.transfer_methods || [];
                                    const newMethods = e.target.checked 
                                      ? [...currentMethods.filter(m => m !== 'local_file'), 'local_file']
                                      : currentMethods.filter(m => m !== 'local_file');
                                    updateConfig('file_upload.image.transfer_methods', newMethods);
                                  }}
                                  className="rounded border-stone-300"
                                />
                                <label htmlFor="local_file" className={cn(
                                  "text-sm font-serif flex items-center gap-2",
                                  isDark ? "text-stone-300" : "text-stone-700"
                                )}>
                                  <FileText className="h-4 w-4" />
                                  本地文件 (local_file)
                                </label>
                              </div>
                            </div>
                            <p className={cn(
                              "text-xs mt-2 font-serif",
                              isDark ? "text-stone-400" : "text-stone-500"
                            )}>
                              至少选择一种传递方式
                            </p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* 底部操作栏 */}
          <div className={cn(
            "p-6 border-t relative",
            isDark ? "border-stone-700" : "border-stone-200"
          )}>
            {/* 背景装饰 */}
            <div className="absolute inset-0 bg-gradient-to-t from-blue-500/5 via-transparent to-transparent" />
            
            <div className="flex gap-3 relative z-10">
              <button
                onClick={handleReset}
                disabled={!hasChanges}
                className={cn(
                  "flex-1 flex items-center justify-center gap-2 py-3 px-4 rounded-2xl",
                  "font-medium font-serif transition-all duration-300",
                  "hover:scale-[1.02] focus:outline-none focus:ring-2",
                  hasChanges
                    ? isDark
                      ? "bg-gradient-to-r from-stone-700 to-stone-600 hover:from-stone-600 hover:to-stone-500 text-stone-200 shadow-lg hover:shadow-xl focus:ring-stone-500/20"
                      : "bg-gradient-to-r from-stone-100 to-stone-200 hover:from-stone-200 hover:to-stone-300 text-stone-700 shadow-lg hover:shadow-xl focus:ring-stone-400/20"
                    : "opacity-50 cursor-not-allowed bg-stone-500/20 text-stone-500"
                )}
              >
                <RotateCcw className={cn(
                  "h-4 w-4 transition-transform duration-300",
                  hasChanges && "group-hover:rotate-180"
                )} />
                重置
              </button>
              <button
                onClick={handleSave}
                disabled={!hasChanges}
                className={cn(
                  "flex-1 flex items-center justify-center gap-2 py-3 px-4 rounded-2xl",
                  "font-medium font-serif transition-all duration-300",
                  "hover:scale-[1.02] focus:outline-none focus:ring-2",
                  hasChanges
                    ? "bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white shadow-lg shadow-blue-500/25 hover:shadow-xl hover:shadow-blue-500/40 focus:ring-blue-500/20"
                    : "opacity-50 cursor-not-allowed bg-blue-500/20 text-blue-500"
                )}
              >
                <Save className={cn(
                  "h-4 w-4 transition-transform duration-300",
                  hasChanges && "group-hover:scale-110"
                )} />
                保存配置
              </button>
            </div>
            
            {hasChanges && (
              <div className="relative z-10">
                <p className={cn(
                  "text-xs text-center mt-3 font-serif animate-pulse",
                  isDark ? "text-stone-400" : "text-stone-600"
                )}>
                  您有未保存的更改
                </p>
                {/* 提示装饰 */}
                <div className="flex justify-center mt-2">
                  <div className="flex space-x-1">
                    <div className="w-1 h-1 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                    <div className="w-1 h-1 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                    <div className="w-1 h-1 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default DifyParametersPanel; 