---
description:
globs:
alwaysApply: false
---
# 响应式开发最佳实践

本规则提供 AgentifUI 项目中响应式开发的最佳实践、统一宽度管理和组件设计指南。

## 核心原则

1. **移动优先设计** - 始终先为移动设备设计，再扩展到更大屏幕
2. **统一宽度管理** - 使用 `useChatWidth` Hook 保持一致的布局宽度
3. **语义化响应式类** - 使用有意义的 Tailwind CSS 类名组合
4. **组件化设计** - 将复杂 UI 拆分为可重用的响应式组件

## 统一宽度管理系统

### useChatWidth Hook

所有聊天相关组件必须使用 [lib/hooks/use-chat-width.ts](mdc:lib/hooks/use-chat-width.ts) 来保持一致的宽度：

```typescript
import { useChatWidth } from '@lib/hooks/use-chat-width';

const ChatComponent = () => {
  const { widthClass, paddingClass } = useChatWidth();
  
  return (
    <div className={cn(
      "w-full mx-auto",
      widthClass,
      paddingClass
    )}>
      {/* 组件内容 */}
    </div>
  );
};
```

### 宽度类说明

- `widthClass`: 控制容器的最大宽度
- `paddingClass`: 控制容器的内边距
- 自动适配不同屏幕尺寸的最佳宽度

## Tailwind CSS 响应式断点

项目使用标准 Tailwind CSS 断点系统：

```
默认 (base): < 640px  - 移动设备（竖屏）
sm: 640px            - 小型设备（手机横屏）
md: 768px            - 中型设备（平板）
lg: 1024px           - 大型设备（笔记本）
xl: 1280px           - 特大型设备（台式机）
2xl: 1536px          - 超大型设备
```

## 响应式组件模式

### 1. 聊天组件响应式模式

参考 [components/chat/chat-loader.tsx](mdc:components/chat/chat-loader.tsx)：

```typescript
export const ChatLoader = ({ messages }: ChatLoaderProps) => {
  const { widthClass, paddingClass } = useChatWidth();
  
  return (
    <div className={cn(
      "w-full mx-auto overflow-y-auto pb-32",
      widthClass,
      paddingClass
    )}>
      {messages.map(message => (
        <MessageComponent key={message.id} message={message} />
      ))}
    </div>
  );
};
```

### 2. 输入组件响应式模式

参考 [components/chat-input/index.tsx](mdc:components/chat-input/index.tsx)：

```typescript
export const ChatInput = () => {
  const { widthClass, paddingClass } = useChatWidth();
  
  return (
    <div className={cn(
      "fixed bottom-0 left-0 right-0 bg-background border-t",
      widthClass,
      paddingClass,
      "mx-auto"
    )}>
      {/* 输入框内容 */}
    </div>
  );
};
```

### 3. 侧边栏响应式模式

参考 [components/sidebar/index.tsx](mdc:components/sidebar/index.tsx)：

```typescript
export const Sidebar = () => {
  const isMobile = useMobile();
  
  return (
    <>
      {/* 桌面端固定侧边栏 */}
      <div className="hidden md:flex md:w-64 md:flex-col">
        <SidebarContent />
      </div>
      
      {/* 移动端抽屉式侧边栏 */}
      {isMobile && (
        <div className="fixed inset-0 z-50 md:hidden">
          <SidebarBackdrop />
          <SidebarContent />
        </div>
      )}
    </>
  );
};
```

## 移动端适配策略

### 1. 导航适配

使用 [components/mobile/mobile-nav-button.tsx](mdc:components/mobile/mobile-nav-button.tsx) 处理移动端导航：

```typescript
// 仅在移动端显示
<div className="md:hidden">
  <MobileNavButton />
</div>

// 仅在桌面端显示
<div className="hidden md:flex">
  <DesktopNavigation />
</div>
```

### 2. 布局切换

```typescript
// 响应式 Flex 布局
<div className="flex flex-col md:flex-row">
  <aside className="w-full md:w-64">侧边栏</aside>
  <main className="flex-1">主内容</main>
</div>

// 响应式 Grid 布局
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {items.map(item => <Card key={item.id} {...item} />)}
</div>
```

## 响应式文本和间距

### 文本大小适配

```typescript
// 响应式标题
<h1 className="text-2xl md:text-3xl lg:text-4xl font-bold font-serif">
  标题内容
</h1>

// 响应式正文
<p className="text-sm md:text-base lg:text-lg font-serif">
  正文内容
</p>
```

### 间距适配

```typescript
// 响应式内边距
<div className="p-4 md:p-6 lg:p-8">内容</div>

// 响应式外边距
<div className="mt-4 md:mt-6 lg:mt-8">内容</div>

// 响应式间隙
<div className="space-y-4 md:space-y-6 lg:space-y-8">
  <div>项目1</div>
  <div>项目2</div>
</div>
```

## 自定义 Hook 使用

### 移动端检测

使用 [lib/hooks/use-mobile.ts](mdc:lib/hooks/use-mobile.ts)：

```typescript
import { useMobile } from '@lib/hooks/use-mobile';

const Component = () => {
  const isMobile = useMobile();
  
  return (
    <div>
      {isMobile ? <MobileView /> : <DesktopView />}
    </div>
  );
};
```

### 聊天宽度管理

使用 [lib/hooks/use-chat-width.ts](mdc:lib/hooks/use-chat-width.ts)：

```typescript
import { useChatWidth } from '@lib/hooks/use-chat-width';

const ChatComponent = () => {
  const { widthClass, paddingClass } = useChatWidth();
  
  // 自动获得一致的宽度和内边距
  return (
    <div className={cn("w-full mx-auto", widthClass, paddingClass)}>
      {/* 内容 */}
    </div>
  );
};
```

## 响应式组件注释规范

遵循 [comment-rule.mdc](mdc:.cursor/rules/comment-rule.mdc) 中的注释规范：

```typescript
{/* --- 响应式导航栏 --- */}
{/* 移动端：垂直菜单，隐藏在汉堡菜单后 */}
{/* 平板及以上：水平排列，直接显示 */}
<nav className="flex flex-col md:flex-row fixed md:relative w-full md:w-auto">
  {/* 导航内容 */}
</nav>
```

## 性能优化建议

1. **避免过度使用响应式类** - 组合使用基础类和少量响应式类
2. **提取重复模式** - 将常用的响应式模式提取为组件
3. **使用 CSS-in-JS 谨慎** - 优先使用 Tailwind CSS 类
4. **测试所有断点** - 确保在所有关键断点下都能正常工作

## 开发工具

1. **浏览器开发工具** - 使用响应式设计模式测试
2. **Tailwind CSS IntelliSense** - VSCode 扩展提供类名提示
3. **移动端真机测试** - 定期在真实设备上测试

## 相关规则文件

- [tailwind-responsive.mdc](mdc:.cursor/rules/tailwind-responsive.mdc) - 详细的 Tailwind 响应式规范
- [file-naming.mdc](mdc:.cursor/rules/file-naming.mdc) - 响应式组件文件命名规范
- [comment-rule.mdc](mdc:.cursor/rules/comment-rule.mdc) - 响应式代码注释规范

遵循这些最佳实践可确保 AgentifUI 在各种设备上提供一致且优质的用户体验。
