---
description: Must read before making any database schema changes or migrations
alwaysApply: false
---

# Supabase Database Development Standards

## Core Principles

1. **Security First**: MUST thoroughly evaluate and test all database operations
2. **Type Synchronization**: MUST synchronize TypeScript type definitions with database changes
3. **Documentation Sync**: MUST update related documentation with all changes
4. **Atomic Commits**: MUST commit migration files, type definitions, and documentation together

## 6-Phase Development Flow

### Phase 1: Requirements Analysis & Impact Assessment

#### 1.1 Requirements Understanding
- MUST clarify specific database change requirements and objectives
- MUST analyze business context and technical necessity
- MUST determine scope (table structure, indexes, constraints, functions)

#### 1.2 Impact Assessment
**Database Level:**
- Table structure changes impact on existing data
- Foreign key constraints and cascade deletion impact
- Index performance impact
- RLS policy impact

**Application Level:**
- TypeScript type definition files requiring updates
- Business logic code locations requiring modifications
- API interface compatibility impact
- Frontend component data structure dependencies

#### 1.3 Risk Assessment
- **High Risk**: DROP TABLE, ALTER COLUMN type changes, constraint deletion
- **Medium Risk**: ADD COLUMN, CREATE INDEX, RLS policy modifications
- **Low Risk**: INSERT data, UPDATE configuration, CREATE FUNCTION

### Phase 2: Create Migration Files

#### 2.1 Get Standard Timestamp
```bash
# Use date command to get standard format timestamp
date +%Y%m%d%H%M%S
```

#### 2.2 Create Migration File
Migration file naming format: `{timestamp}_{descriptive_name}.sql`

**Example:**
```
supabase/migrations/20250621091656_add_user_preferences_table.sql
```

#### 2.3 Migration File Standards

**File Header Comment:**
```sql
-- Migration: 20250621091656_add_user_preferences_table.sql
-- Description: Add user preferences table for theme and language settings
-- Impact: New table, no existing data impact
-- Risk: Low risk
```

**MUST Include Checks:**
```sql
-- Check if table exists
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'user_preferences'
    ) THEN
        -- Create table SQL
        CREATE TABLE user_preferences (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
            theme TEXT DEFAULT 'system',
            language TEXT DEFAULT 'zh-CN',
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
    END IF;
END $$;
```

### Phase 3: Type Definition Synchronization

#### 3.1 Update Core Type Files

**MUST update:**
- `lib/types/database.ts` - Core database type definitions
- `lib/supabase/types.ts` - Supabase auto-generated types

#### 3.2 Type Definition Example

```typescript
// In lib/types/database.ts
export interface UserPreference {
  id: string;
  user_id: string;
  theme: string;
  language: string;
  created_at: string;
  updated_at: string;
}

// Update Database namespace
export namespace Database {
  export interface Tables {
    // ... existing tables
    user_preferences: UserPreference;
  }
}
```

### Phase 4: Business Code Synchronization

#### 4.1 Check Required Directories

**MUST check:**
- `lib/db/` - Database operation layer
- `lib/hooks/` - React Hooks layer
- `lib/services/` - Service layer

#### 4.2 Code Update Example

```typescript
// lib/db/user-preferences.ts
import { Database } from '@lib/types/database';

type UserPreference = Database['Tables']['user_preferences'];

export async function getUserPreferences(userId: string): Promise<UserPreference | null> {
  // Implementation
}
```

### Phase 5: Testing and Validation

#### 5.1 Local Testing
```bash
# Push migration to local database
supabase db push

# Check migration status
supabase db status
```

#### 5.2 Type Checking
```bash
# TypeScript type checking
pnpm run type-check

# Build testing
pnpm run build
```

### Phase 6: Deployment and Documentation

#### 6.1 Commit Changes
MUST follow git-commit-rule.mdc format:
```bash
git commit -m "feat(db): add user preferences table" \
           -m "" \
           -m "Add user_preferences table for theme and language settings" \
           -m "- Add migration file with proper checks" \
           -m "- Update TypeScript type definitions" \
           -m "- Add corresponding data access functions"
```

#### 6.2 Deploy to Production
```bash
# Deploy to Supabase cloud
supabase db push --linked
```

## Emergency Rollback

If migration causes issues:
```bash
# View migration history
supabase migration list

# Rollback to specific version
supabase db reset --db-url [your-db-url]
```

## Best Practices

1. **Incremental Changes**: Break large changes into multiple small migrations
2. **Backup First**: Ensure data backup before important changes
3. **Test Driven**: Test thoroughly in development environment first
4. **Document Immediately**: Update documentation immediately after changes
5. **Team Communication**: Communicate major changes with team in advance

Following these standards ensures data safety, type consistency, and code synchronization.