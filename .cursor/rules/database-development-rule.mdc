---
description: ⚠️ Database Migration Rule (AgentifUI)  Before creating any database migration, you MUST read and follow this rule.  This rule applies to all schema changes: creating/modifying tables, columns, indexes, constraints, data types, enums, RLS policies, triggers, or functions.  It ensures data safety, type consistency, and code-sync across the stack.  ❗ Ignoring this rule may cause broken migrations, rejected PRs, or production issues.
globs: 
alwaysApply: false
---
# Database Development Complete Process Rule

## Rule Description

This rule defines the complete development process for all database-related operations in the AgentifUI project. Any database modifications, additions, or deletions must strictly follow this rule to ensure data safety, type consistency, and documentation synchronization.

## Core Principles

1. **Safety First**: All database operations must be thoroughly evaluated and tested
2. **Type Synchronization**: Database structure changes must synchronously update TypeScript type definitions
3. **Documentation Synchronization**: All changes must promptly update related documentation
4. **Code Synchronization**: Related business logic code must be synchronously updated
5. **Atomic Commits**: Migration files, type definitions, and documentation as a unified commit

## Complete Development Process

### Phase 1: Requirements Analysis and Impact Assessment

#### 1.1 Requirements Understanding
- Clarify specific requirements and objectives for database changes
- Analyze business background and technical necessity of changes
- Determine scope of changes (table structure, indexes, constraints, functions, etc.)

#### 1.2 Impact Assessment
Must comprehensively assess the following impact scope:

**Database Level Impact:**
- Impact of table structure changes on existing data
- Impact of foreign key constraints and cascade deletions
- Impact on index performance
- Impact on RLS policies
- Impact on triggers and functions

**Application Level Impact:**
- TypeScript type definition files that need updating
- Business logic code locations that need modification
- API interface compatibility impact
- Frontend component data structure dependencies

**System Level Impact:**
- Complexity and risk of data migration
- System downtime assessment
- Rollback strategy formulation

#### 1.3 Risk Assessment
- **High-risk operations**: DROP TABLE, ALTER COLUMN type changes, delete constraints
- **Medium-risk operations**: ADD COLUMN, CREATE INDEX, modify RLS policies
- **Low-risk operations**: INSERT data, UPDATE configuration, CREATE FUNCTION

### Phase 2: Migration File Creation

#### 2.1 Get Standard Timestamp
```bash
# Use date command to get standard format timestamp
date +%Y%m%d%H%M%S
```

#### 2.2 Create Migration File
Migration file naming format: `{timestamp}_{descriptive_name}.sql`

**Example:**
```
supabase/migrations/20250621091656_add_user_preferences_table.sql
```

#### 2.3 Migration File Writing Standards

**File Header Comments:**
```sql
-- Migration file: 20250621091656_add_user_preferences_table.sql
-- Description: Add user preference settings table, support theme, language and other personalized configurations
-- Impact scope: New table, does not affect existing data
-- Risk level: Low risk
```

**Must Include Checks:**
```sql
-- Check if table already exists
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'user_preferences'
    ) THEN
        -- SQL statements to create table
    END IF;
END $$;
```

**Must Include Comments:**
```sql
-- Add comments for new tables/fields
COMMENT ON TABLE user_preferences IS 'User personalized preference settings table';
COMMENT ON COLUMN user_preferences.theme IS 'Interface theme settings';
```

### Phase 3: Type Definition Synchronization

#### 3.1 Update Core Type Files

Must check and update the following files:

**[lib/types/database.ts](mdc:lib/types/database.ts)** - Core database type definitions
- Update related interface definitions
- Add new enum types
- Ensure field types are consistent with database

**[lib/supabase/types.ts](mdc:lib/supabase/types.ts)** - Supabase auto-generated types
- Usually need to regenerate or manually sync
- Ensure Row, Insert, Update types are complete

#### 3.2 Type Definition Update Example

```typescript
// Add new interface in lib/types/database.ts
export interface UserPreference {
  id: string;
  user_id: string;
  theme: string;
  language: string;
  notification_settings: Record<string, any>;
  ai_preferences: Record<string, any>;
  updated_at: string;
}

// Update Database namespace
export namespace Database {
  export interface Tables {
    // ... existing tables
    user_preferences: UserPreference;
  }
}
```

### Phase 4: Business Code Synchronization

#### 4.1 Check lib Directory Structure

Must check related files in the following directories:

**[lib/db/](mdc:lib/db)** - Database operations layer
- Check if new data access functions need to be added
- Update type definitions of existing query functions
- Add CRUD operations for new tables

**[lib/hooks/](mdc:lib/hooks)** - React Hooks layer
- Check if new custom hooks need to be added
- Update type definitions of existing hooks
- Ensure data fetching logic is correct

**[lib/services/](mdc:lib/services)** - Service layer
- Check if business logic services need updating
- Update data structures of API calls
- Ensure data transfer between services is correct

#### 4.2 Code Update Example

```typescript
// lib/db/user-preferences.ts
import { Database } from '@/lib/types/database';

type UserPreference = Database['Tables']['user_preferences'];

export async function getUserPreferences(userId: string): Promise<UserPreference | null> {
  // Implement data access logic
}

// lib/hooks/use-user-preferences.ts
export function useUserPreferences() {
  // Implement React Hook logic
}
```

### Phase 5: Testing and Validation

#### 5.1 Local Testing
```bash
# Push migration to local database
supabase db push

# Check if migration was successful
supabase db status
```

#### 5.2 Type Checking
```bash
# TypeScript type checking
npx tsc --noEmit

# Build testing
pnpm run build
```

#### 5.3 Functional Testing
- Test if new features work properly
- Test if existing features are affected
- Test data integrity and consistency

### Phase 6: Error Handling

#### 6.1 Migration Failure Handling
If `supabase db push` fails:
1. Carefully read error messages
2. Fix problems in migration file
3. Re-execute push
4. Record problems and solutions

#### 6.2 Type Error Handling
If TypeScript checking fails:
1. Locate problem files based on error messages
2. Update related type definitions
3. Ensure all references are updated
4. Re-execute type checking

### Phase 7: Documentation Updates

#### 7.1 Must Update Documentation

**[docs/DATABASE-DESIGN.md](mdc:docs/DATABASE-DESIGN.md)** - Database design documentation
- Update table structure descriptions
- Update ER diagrams (if structural changes)
- Update migration file records
- Update design feature descriptions

**[docs/supabase-docs.md](mdc:docs/supabase-docs.md)** - Supabase usage documentation
- Update data table structure descriptions
- Update RLS policy descriptions
- Update related migration file records
- Update usage examples

#### 7.2 Documentation Update Requirements

**Accuracy Requirements:**
- All table structure descriptions must be consistent with actual database
- Field types, constraints, default values must be accurate
- Relationship descriptions must be correct

**Completeness Requirements:**
- New tables must be completely described
- Modified fields must update descriptions
- Related indexes, triggers must be recorded

**Timeliness Requirements:**
- Documentation updates must be synchronized with code changes
- Documentation cannot lag behind actual implementation

### Phase 8: Git Commit

#### 8.1 Commit Content Check

Ensure the following files are all correctly updated:
- [ ] Migration files (`supabase/migrations/*.sql`)
- [ ] Core type definitions (`lib/types/database.ts`)
- [ ] Supabase type definitions (`lib/supabase/types.ts`)
- [ ] Related business code (`lib/db/`, `lib/hooks/`, `lib/services/`)
- [ ] Database design documentation (`docs/DATABASE-DESIGN.md`)
- [ ] Supabase documentation (`docs/supabase-docs.md`)

#### 8.2 Commit Message Standards

Use [git-commit-rule](mdc:git-commit-rule) standards:

```
feat(database): add user preference settings table

- Add user_preferences table supporting theme and language settings
- Update related TypeScript type definitions
- Add data access layer and React Hooks
- Update database design documentation

Migration file: 20250621091656_add_user_preferences_table.sql
Impact scope: New functionality, no breaking changes
Test status: ✅ Local testing passed
```

#### 8.3 Commit Strategy

**Single Atomic Commit:**
- All related files must be completed in one commit
- Do not allow batch commits causing inconsistent states
- Must ensure all tests pass before committing

## Special Scenario Handling

### Breaking Changes Handling

For changes that may cause data loss or incompatibility:

1. **Data Backup**: Must backup related data before changes
2. **Migration Strategy**: Develop detailed data migration plan
3. **Rollback Plan**: Prepare complete rollback solution
4. **Phased Execution**: Break complex changes into multiple safe steps

### Production Environment Deployment

1. **Pre-release Testing**: Thoroughly test in pre-release environment
2. **Maintenance Window**: Choose appropriate maintenance time window
3. **Monitoring Preparation**: Prepare related monitoring and alerts
4. **Team Notification**: Notify related team members in advance

### Emergency Fixes

For emergency database issue fixes:

1. **Quick Assessment**: Quick but accurate assessment of problem impact
2. **Minimal Fix**: Adopt minimal risk solution
3. **Documentation Supplement**: Promptly supplement complete documentation after resolution
4. **Post-mortem Review**: Conduct post-mortem after problem resolution

## Tools and Command Reference

### Common Supabase Commands
```bash
# View database status
supabase db status

# Push migration
supabase db push

# Reset local database
supabase db reset

# Generate type definitions
supabase gen types typescript --local > lib/supabase/types.ts
```

### Common Development Commands
```bash
# Get timestamp
date +%Y%m%d%H%M%S

# TypeScript checking
npx tsc --noEmit

# Build testing
pnpm run build

# Run tests
pnpm run test
```

## Checklist

Before completing database development tasks, please confirm the following checklist:

### Development Phase
- [ ] Requirements analysis completed, impact scope clear
- [ ] Risk assessment completed, response strategies formulated
- [ ] Migration files created and written according to standards
- [ ] Local database testing passed

### Code Synchronization Phase
- [ ] Core type definitions updated
- [ ] Supabase type definitions synchronized
- [ ] Related business code updated
- [ ] TypeScript type checking passed
- [ ] Build testing passed

### Documentation Update Phase
- [ ] DATABASE-DESIGN.md updated
- [ ] supabase-docs.md updated
- [ ] Documentation content accurate and complete
- [ ] Migration records added

### Commit Phase
- [ ] All related files ready
- [ ] Commit message follows standards
- [ ] Atomic commit contains complete changes
- [ ] Team members notified (if needed)

## Violation Handling

Violations of this rule include but are not limited to:
- Directly modifying database without creating migration files
- Type definitions inconsistent with database structure
- Documentation updates lagging or missing
- Batch commits causing inconsistent states

When violations are discovered, must immediately stop related operations and re-execute the complete process according to standards.

## Rule Maintenance

This rule will be continuously updated based on project development and best practice evolution. Any modifications to the rule must be discussed and confirmed by the team.
