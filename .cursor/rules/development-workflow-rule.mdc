---
description: Must read before starting any development task or code changes
alwaysApply: false
---
# Development Workflow Standards

## Core Principles

1. **Analyze Before Coding**: MUST understand the root problem before implementation
2. **Risk Assessment**: MUST evaluate impact scope of changes
3. **Minimal Changes**: MUST make minimal safe modifications
4. **Comprehensive Validation**: MUST perform multi-dimensional verification
5. **Standard Commits**: MUST follow git-commit-rule

## Standard Workflow

### Phase 1: Problem Analysis
- **Root Cause**: MUST understand the real problem, not just surface symptoms
- **Impact Scope**: MUST identify affected modules and users
- **Code Research**: MUST use codebase search tools to find relevant implementations
- **Solution Design**: MUST compare 2-3 approaches and choose lowest risk option

### Phase 2: Risk Assessment
- **Direct Impact**: MUST identify directly affected files and functions
- **Indirect Impact**: MUST identify dependent components and callers
- **Breaking Changes**: MUST assess API/interface compatibility
- **Performance Impact**: MUST evaluate loading time, memory, and responsiveness
- **Security Risk**: MUST assess permissions, data security, XSS/CSRF implications

### Phase 3: Implementation
- **Minimal Scope**: MUST make only necessary changes, avoid unrelated refactoring
- **Interface Stability**: MUST maintain existing function signatures
- **Type Safety**: MUST ensure TypeScript correctness
- **Error Handling**: MUST implement comprehensive error management

### Phase 4: Validation
- **Functional Testing**: MUST verify core functionality works as expected
- **Regression Testing**: MUST ensure existing functionality remains intact
- **Type Checking**: MUST run `pnpm run type-check`
- **Build Testing**: MUST run `pnpm run build` (ask user first if unsure)
- **Cross-browser**: MUST test on major browsers

### Phase 5: Documentation & Commit
- **Update Documentation**: MUST update API, component, architecture docs when necessary
- **Git Commit**: MUST strictly follow git-commit-rule
- **Self Review**: MUST perform complete code review before commit

## Special Scenarios

### Bug Fixes
1. **Reproduction**: MUST ensure stable reproduction
2. **Root Cause**: MUST perform deep analysis, avoid surface fixes
3. **Minimal Fix**: MUST choose lowest risk solution
4. **Regression Check**: MUST verify complete fix

### Feature Development
1. **Requirements Understanding**: MUST deeply understand user needs
2. **Technical Design**: MUST consider scalability and maintainability
3. **Phased Implementation**: MUST break down into verifiable stages
4. **User Testing**: MUST gather real user feedback

## Quality Checklist

### Pre-Commit Validation
- [ ] TypeScript type checking passes
- [ ] Build succeeds
- [ ] Core functionality testing complete
- [ ] No regression issues
- [ ] Code follows project standards
- [ ] Commit message follows git-commit-rule

## Critical Reminders

### Development Server Usage
**⚠️ MUST NOT run `pnpm run dev` unless explicitly needed**
- Developer usually already has dev server running
- Only run when explicitly requested or confirmed safe
- MUST ask before starting development server
- Use build/type-check commands for validation

### Common Commands
```bash
# Type checking (recommended for validation)
pnpm run type-check

# Build testing (safe to run)
pnpm run build
```

## Continuous Improvement

- Regularly review workflow processes
- Collect team feedback
- Optimize development processes
- Upgrade development tools