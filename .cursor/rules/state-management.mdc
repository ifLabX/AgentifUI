---
description: 
globs: 
alwaysApply: false
---
# State Management Guide

This document describes the state management approach used in the AgentifUI project, particularly the patterns for using Zustand for state management.

## State Management Tech Stack

The project uses [Zustand](mdc:https:/github.com/pmndrs/zustand) as the primary state management solution, which is a lightweight state management library with the following features:

- Hook-based clean API
- No Provider wrapper required
- Supports state slicing and selective subscriptions
- Supports middleware (e.g., persistence, devtools)

## Store Organization Structure

Store files are located in the `lib/stores/` directory, organized by functional domains:

```
lib/stores/
├── chat-input-store.ts    # Chat input related state
├── chat-layout-store.ts   # Chat layout related state
├── sidebar-store.ts       # Sidebar state
├── theme-store.ts         # Theme related state
└── ui/                    # UI-related state subdirectory
    └── prompt-panel-store.ts  # Prompt panel state
```

## Store Implementation Patterns

### Basic Store Pattern

```typescript
import { create } from 'zustand';

interface StateType {
  // State properties
  someState: string;
  // Action methods
  setSomeState: (value: string) => void;
}

export const useMyStore = create<StateType>((set) => ({
  // Initial state
  someState: 'initial value',
  // Update methods
  setSomeState: (value) => set({ someState: value }),
}));
```

### Constant Export Pattern

For constant values that need to be shared across multiple components, store files typically export these constants:

```typescript
// Define and export constants in store file
export const SOME_CONSTANT = 'value';

// Then can be used in both store and components
```

## Chat Layout State Management

Chat layout state ([lib/stores/chat-layout-store.ts](mdc:lib/stores/chat-layout-store.ts)) is a typical example:

```typescript
import { create } from 'zustand';

interface ChatLayoutState {
  inputHeight: number; // Store actual height of input box
  setInputHeight: (height: number) => void;
  resetInputHeight: () => void;
}

const INITIAL_INPUT_HEIGHT = 48; 

export const useChatLayoutStore = create<ChatLayoutState>((set) => ({
  inputHeight: INITIAL_INPUT_HEIGHT, // Initial height
  setInputHeight: (height) => set({ inputHeight: height }),
  resetInputHeight: () => set({ inputHeight: INITIAL_INPUT_HEIGHT }),
}));

export { INITIAL_INPUT_HEIGHT };
```

This store:
- Tracks input box height (`inputHeight`)
- Provides update method (`setInputHeight`)
- Provides reset method (`resetInputHeight`)
- Exports initial constant value (`INITIAL_INPUT_HEIGHT`)

## Using Store in Components

Using the `ChatInput` component as an example:

```tsx
import { useChatLayoutStore, INITIAL_INPUT_HEIGHT } from '@lib/stores/chat-layout-store';

const Component = () => {
  // Get state and methods
  const { inputHeight, setInputHeight } = useChatLayoutStore();
  
  // Use state
  useEffect(() => {
    // Update state at appropriate times
    setInputHeight(newHeight);
    
    // Cleanup function
    return () => resetInputHeight();
  }, [setInputHeight, resetInputHeight]);
  
  return (
    // Render UI based on state
    <div style={{ height: `${inputHeight}px` }}>
      {/* Component content */}
    </div>
  );
};
```

## Best Practices

1. **State Splitting**: Split unrelated state into different stores
2. **Selective Subscription**: Only subscribe to state slices needed by components to reduce unnecessary re-renders
3. **Export Constants**: Export constants related to store from store files to ensure consistency
4. **Use useCallback**: Wrap update functions passed to child components with useCallback to reduce unnecessary re-renders
5. **Cleanup Functions**: Reset relevant state when components unmount
