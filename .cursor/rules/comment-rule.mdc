---
description: 
globs: 
alwaysApply: true
---
# Comment Rule

## Core Requirements

- **Language**: All comments MUST be in English
- **Purpose**: Explain *why*, not just *what* (unless complex)
- **Style**: Concise and clear

## Comment Separators

Use `---` separators for significant comment changes:

```typescript
// --- BEGIN COMMENT ---
// Important English comment explaining the reason for complex logic
// --- END COMMENT ---
function complexFunction() {
  // ... implementation ...
}
```

## Tailwind CSS Comment Patterns

### Class Grouping
```tsx
<div className={cn(
  // Base styles
  "bg-white rounded-lg shadow-md",
  
  // Responsive layout
  "flex flex-col md:flex-row lg:items-center",
  
  // Responsive spacing
  "p-4 md:p-6 lg:p-8",
  
  // Conditional styles
  isActive && "border-blue-500 border-2"
)}>
```

### Responsive Breakpoint Comments
```tsx
{/* --- Responsive navigation bar --- */}
{/* Mobile: vertical menu, hidden behind hamburger menu */}
{/* Tablet and above: horizontal layout, directly displayed */}
<nav className="flex flex-col md:flex-row">
```

### Conditional Rendering
```tsx
{/* --- Mobile-only component --- */}
{isMobileView && <MobileNavigation />}

{/* --- Desktop-only component --- */}
{!isMobileView && <DesktopNavigation />}
```

## Placement Rules

- Place comments **before** the code they describe
- Comment functions, complex logic, and non-obvious code
- Use end-of-line comments sparingly for short explanations

## Goal

The primary goal of these commenting guidelines is to make the codebase easier to understand and maintain for everyone involved. Use comments thoughtfully to enhance code clarity.

## Responsive Tailwind CSS Class Comment Standards

When using Tailwind CSS for responsive development, follow these comment standards:

### Tailwind Class Grouping Comments

For complex Tailwind class combinations, group by function and add comments:

```tsx
<div 
  className={cn(
    // Base styles
    "bg-white rounded-lg shadow-md",
    
    // Responsive layout
    "flex flex-col md:flex-row lg:items-center",
    
    // Responsive spacing
    "p-4 md:p-6 lg:p-8",
    
    // Responsive sizing
    "w-full max-w-sm md:max-w-md lg:max-w-lg",
    
    // Conditional styles
    isActive && "border-blue-500 border-2",
    
    // Custom class names
    className
  )}
>
  {/* Content */}
</div>
```

### Responsive Breakpoint Comments

When using complex responsive class combinations, add breakpoint comments explaining behavior at different screen sizes:

```tsx
{/* --- Responsive navigation bar --- */}
{/* Mobile: vertical menu, hidden behind hamburger menu */}
{/* Tablet and above: horizontal layout, directly displayed */}
<nav className="
  flex flex-col md:flex-row 
  fixed md:relative 
  w-full md:w-auto
">
  {/* Navigation links */}
</nav>
```

### Conditional Rendering Comments

For conditional rendering based on screen size, add clear explanatory comments:

```tsx
{/* --- Mobile-only component --- */}
{isMobileView && (
  <MobileNavigation />
)}

{/* --- Desktop-only component --- */}
{!isMobileView && (
  <DesktopNavigation />
)}
```

### Complex Responsive Logic Comments

For complex responsive layout logic, add detailed explanatory comments:

```tsx
{/* 
  --- Layout logic explanation ---
  Small screens: single column vertical layout, image on top, text below
  Medium screens: two-column horizontal layout, image on left, text on right
  Large screens: maintain two columns, but increase spacing and padding
*/}
```

Following these comment standards will make responsive design intentions clearer and improve code readability and maintainability.

