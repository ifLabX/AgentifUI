---
description: Must read when writing code comments or documenting functions
alwaysApply: false
---

# Comment Standards

## Core Requirements

- **Language**: All comments MUST use English
- **Purpose**: MUST explain *why*, not just *what*
- **Style**: MUST be concise and clear
- **Format**: MUST use JSDoc for interfaces/functions, simple comments for logic

## Standard Formats

### JSDoc - Interfaces and Types
```typescript
/**
 * Chat message data structure
 * @description Contains message basic information and persistence-related fields
 */
export interface ChatMessage {
  /** Unique message ID (generated by frontend) */
  id: string;
  /** Message content */
  text: string;
  /** Whether this is a user message */
  isUser: boolean;
}
```

### JSDoc - Functions
```typescript
/**
 * Send chat message to Dify API with streaming response
 * 
 * @param payload - Request payload to send to Dify API
 * @param appId - Dify application ID
 * @returns Promise containing async generator and conversation metadata
 * @throws Error if fetch request fails or API returns error status
 */
export async function streamDifyChat(
  payload: DifyChatRequestPayload,
  appId: string
): Promise<DifyStreamResponse> {
  // Implementation...
}
```

### Simple Comments - Logic Explanation
```typescript
// Check response status, throw error if not 2xx
if (!response.ok) {
  throw new Error(`API request failed: ${response.status}`);
}

// Extract conversation_id from message_end event
if (event.conversation_id && !conversationId) {
  conversationId = event.conversation_id;
}
```

### File Header Comments
```typescript
/**
 * Dify Chat Service
 * @description Implements interaction logic with Dify chat-related APIs
 * @module lib/services/dify/chat-service
 */
```

## Prohibited Patterns

❌ **MUST NOT use these patterns:**
```typescript
// --- BEGIN COMMENT ---
// Complex comment with separators
// --- END COMMENT ---

// TODO: Fix this later
// FIXME: Broken implementation
// HACK: Temporary workaround
```

✅ **MUST use these alternatives:**
```typescript
/**
 * Standard JSDoc comment
 */

// Simple inline comment

// @future Consider implementing this feature
```

## Best Practices

1. **Comment Position**: MUST place comments before the code they describe
2. **Comment Content**: MUST focus on **why** rather than **what**
3. **Keep Updated**: MUST update comments when code changes
4. **Remove Outdated**: MUST remove outdated or obvious comments
5. **Consistent Terminology**: MUST use consistent terminology throughout the project

## Objective

The primary goal is to create **self-documenting code** that is easy to understand and maintain. Use comments thoughtfully to enhance code clarity without cluttering the codebase.

Following these comment standards will make code intentions clearer and improve code readability and maintainability.
