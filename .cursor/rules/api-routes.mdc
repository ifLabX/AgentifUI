---
description: 
globs: 
alwaysApply: false
---
# API Routes Design Guide

This document provides design specifications and development guidelines for API routes in the AgentifUI project.

## Route Structure

API routes are located in the `app/api/` directory, organized using Next.js 13+ App Router pattern:

```
app/api/
  ├── auth/               # Authentication-related APIs
  │   ├── identify/       # User identity identification
  │   └── sso/            # Single sign-on
  │       └── initiate/   # SSO initiation endpoint
  └── dify/               # Dify API integration
      └── [appId]/        # Dynamic route based on Dify app ID
          └── [...slug]/  # Catch-all route handler
              └── route.ts # Proxy implementation
```

## Route Naming Conventions

1. **Directory Naming**:
   - Use lowercase kebab-case (e.g., `user-profile/`)
   - Use square brackets for dynamic route segments (e.g., `[appId]/`)
   - Use spread syntax for catch-all routes (e.g., `[...slug]/`)

2. **File Naming**:
   - Primarily use `route.ts` as API handler file
   - Related helper functions can create other files at the same level (e.g., `utils.ts`)

## Route Handler Functions

Each API route should export one or more of the following standard HTTP methods as handler functions:

```typescript
// app/api/example/route.ts
export async function GET(request: Request) {
  // Handle GET requests
}

export async function POST(request: Request) {
  // Handle POST requests
}

// Other methods: PUT, DELETE, PATCH, HEAD, OPTIONS
```

## Best Practices

1. **Route Organization**:
   - Organize routes by functional domain or service
   - Maintain reasonable nesting depth (no more than 4 levels)

2. **Request Validation**:
   - Strictly validate all inbound requests
   - Use type-safe request parsing (e.g., Zod)

3. **Error Handling**:
   - Use standard HTTP status codes
   - Provide clear error messages
   - Implement unified error response structure

4. **Response Format**:
   - Use consistent response format
   - Support content negotiation (Content-Type) when necessary

```typescript
// Standard response structure example
export type ApiResponse<T> = {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
  };
};
```

5. **Middleware Integration**:
   - Route middleware should be defined in `middleware.ts` at project root
   - Configure middleware for specific routes as needed

## Dify API Proxy Pattern

When implementing Dify API proxy, follow these patterns:

1. Use dynamic segments and catch-all segments to capture all Dify API paths
2. Maintain consistency of request and response headers in proxy implementation
3. Handle streaming responses when necessary
4. Implement appropriate error handling and timeout handling

For example, see [app/api/dify/[appId]/[...slug]/route.ts](mdc:app/api/dify/[appId]/[...slug]/route.ts) for complete implementation.
