---
description: 
globs: 
alwaysApply: false
---
# Dify API Endpoints Complete Guide

This rule provides a complete list of all Dify API endpoints, usage methods, and best practices in the AgentifUI project.

## Core Architecture

AgentifUI uses a three-layer architecture to handle Dify API integration:

1. **Proxy Layer**: [app/api/dify/[appId]/[...slug]/route.ts](mdc:app/api/dify/[appId]/[...slug]/route.ts) - Handles authentication and request forwarding
2. **Service Layer**: [lib/services/dify/](mdc:lib/services/dify) - Business logic and API calls
3. **Type Layer**: [lib/services/dify/types.ts](mdc:lib/services/dify/types.ts) - TypeScript type definitions

## Complete API Endpoints List

### üí¨ Chat Related (Chat)

| Endpoint | Method | Service Function | File Location |
|----------|--------|------------------|---------------|
| `/chat-messages` | POST | `streamDifyChat` | [chat-service.ts](mdc:lib/services/dify/chat-service.ts) |
| `/chat-messages/{task_id}/stop` | POST | `stopDifyStreamingTask` | [chat-service.ts](mdc:lib/services/dify/chat-service.ts) |

### ‚öôÔ∏è Workflow Related (Workflow)

| Endpoint | Method | Service Function | File Location |
|----------|--------|------------------|---------------|
| `/workflows/run` | POST | `executeDifyWorkflow`, `streamDifyWorkflow` | [workflow-service.ts](mdc:lib/services/dify/workflow-service.ts) |
| `/workflows/runs/{workflow_run_id}/stop` | POST | `stopDifyWorkflow` | [workflow-service.ts](mdc:lib/services/dify/workflow-service.ts) |
| `/workflows/runs/{workflow_run_id}` | GET | `getDifyWorkflowRunDetail` | [workflow-service.ts](mdc:lib/services/dify/workflow-service.ts) |
| `/workflows/logs` | GET | `getDifyWorkflowLogs` | [workflow-service.ts](mdc:lib/services/dify/workflow-service.ts) |

### üì± App Management (App)

| Endpoint | Method | Service Function | File Location |
|----------|--------|------------------|---------------|
| `/parameters` | GET | `getDifyAppParameters` | [app-service.ts](mdc:lib/services/dify/app-service.ts) |
| `/info` | GET | `getDifyAppInfo` | [app-service.ts](mdc:lib/services/dify/app-service.ts) |
| `/site` | GET | `getDifyWebAppSettings` | [app-service.ts](mdc:lib/services/dify/app-service.ts) |
| `/meta` | GET | `getDifyAppMeta` | [app-service.ts](mdc:lib/services/dify/app-service.ts) |

### üí¨ Message Management (Messages)

| Endpoint | Method | Service Function | File Location |
|----------|--------|------------------|---------------|
| `/messages` | GET | `getConversationMessages` | [message-service.ts](mdc:lib/services/dify/message-service.ts) |
| `/messages/{message_id}/feedbacks` | POST | `submitMessageFeedback` | [message-service.ts](mdc:lib/services/dify/message-service.ts) |
| `/audio-to-text` | POST | `convertAudioToText` | [message-service.ts](mdc:lib/services/dify/message-service.ts) |

### üó®Ô∏è Conversation Management (Conversations)

| Endpoint | Method | Service Function | File Location |
|----------|--------|------------------|---------------|
| `/conversations` | GET | `getConversations` | [conversation-service.ts](mdc:lib/services/dify/conversation-service.ts) |
| `/conversations/{conversation_id}` | DELETE | `deleteConversation` | [conversation-service.ts](mdc:lib/services/dify/conversation-service.ts) |
| `/conversations/{conversation_id}` | PATCH | `renameConversation` | [conversation-service.ts](mdc:lib/services/dify/conversation-service.ts) |
| `/conversations/{conversation_id}/variables` | GET | `getConversationVariables` | [conversation-service.ts](mdc:lib/services/dify/conversation-service.ts) |

### üìù Text Generation (Completion)

| Endpoint | Method | Service Function | File Location |
|----------|--------|------------------|---------------|
| `/completion-messages` | POST | `executeDifyCompletion`, `streamDifyCompletion` | [completion-service.ts](mdc:lib/services/dify/completion-service.ts) |
| `/completion-messages/{task_id}/stop` | POST | `stopDifyCompletion` | [completion-service.ts](mdc:lib/services/dify/completion-service.ts) |

### üìã Annotation Management (Annotations)

| Endpoint | Method | Service Function | File Location |
|----------|--------|------------------|---------------|
| `/apps/annotations` | GET | `getDifyAnnotations` | [annotation-service.ts](mdc:lib/services/dify/annotation-service.ts) |
| `/apps/annotations` | POST | `createDifyAnnotation` | [annotation-service.ts](mdc:lib/services/dify/annotation-service.ts) |
| `/apps/annotations/{annotation_id}` | PUT | `updateDifyAnnotation` | [annotation-service.ts](mdc:lib/services/dify/annotation-service.ts) |
| `/apps/annotations/{annotation_id}` | DELETE | `deleteDifyAnnotation` | [annotation-service.ts](mdc:lib/services/dify/annotation-service.ts) |
| `/apps/annotation-reply/{action}` | POST | `setDifyAnnotationReplySettings` | [annotation-service.ts](mdc:lib/services/dify/annotation-service.ts) |
| `/apps/annotation-reply/{action}/status/{job_id}` | GET | `getDifyAnnotationReplyJobStatus` | [annotation-service.ts](mdc:lib/services/dify/annotation-service.ts) |

## Usage Examples

### Import Service Functions

```typescript
// Import from unified entry point
import { 
  streamDifyChat, 
  getDifyAnnotations,
  createDifyAnnotation 
} from '@lib/services/dify';

// Or import from specific service files
import { streamDifyChat } from '@lib/services/dify/chat-service';
```

### Chat Service Usage

```typescript
const response = await streamDifyChat(appId, {
  query: "Hello",
  user: "user123",
  response_mode: "streaming"
});

for await (const chunk of response.answerStream) {
  console.log(chunk);
}
```

### Annotation Management Usage

```typescript
// Get annotation list
const annotations = await getDifyAnnotations(appId, { page: 1, limit: 20 });

// Create new annotation
const newAnnotation = await createDifyAnnotation(appId, {
  question: "What is AI?",
  answer: "Artificial Intelligence is..."
});
```

## Error Handling

All service functions use unified error handling mechanism:

```typescript
try {
  const result = await someService(appId, params);
  // Handle success result
} catch (error) {
  if (error.status === 401) {
    // Handle authentication error
  } else if (error.status === 429) {
    // Handle rate limiting error
  } else {
    // Handle other errors
  }
}
```

## Type Safety

All API-related type definitions are in [lib/services/dify/types.ts](mdc:lib/services/dify/types.ts):

- Request body types: `Dify*RequestPayload`
- Response body types: `Dify*Response`
- SSE event types: `Dify*SseEvent`
- Error types: `DifyApiError`

## Development Guide

1. **Adding New Endpoints**: Follow the process in [dify-integration-rule.mdc](mdc:.cursor/rules/dify-integration-rule.mdc)
2. **File Naming**: Follow [file-naming.mdc](mdc:.cursor/rules/file-naming.mdc) standards
3. **Commit Standards**: Follow [git-commit-rule.mdc](mdc:.cursor/rules/git-commit-rule.mdc) format

## Summary

- **Total Endpoints**: 25
- **Service Files**: 7
- **Supported App Types**: 5 (chatbot, agent, chatflow, workflow, text-generation)
- **Coverage**: 100% Dify API functionality
