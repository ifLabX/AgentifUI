---
description: gw提交命令规范
globs: 
alwaysApply: false
---
# Git Workflow Helper (`gw`) Usage Rules

This rule document details how to use the `gw` script in the project (located at `scripts/git_workflow.sh`) to simplify and standardize Git operations, especially when following specific development workflows.

## Core Philosophy

The `gw` script aims to encapsulate common multi-step Git operations into simple commands, reducing memory burden, improving efficiency, and increasing operation safety through interactive prompts and checks.

## ⭐ Core Workflow Commands (Recommended)

These are the core of the `gw` script, designed specifically for typical feature development processes:

1.  **`gw start <branch-name> [--local] [base-branch]`**: **Start new task**
    *   **Purpose:** Create and switch to a new feature branch from the latest main branch (`master` or `main`, script auto-detects) or specified base branch.
    *   **Flow:**
        1.  (Default) Switch to base branch (e.g., `master`).
        2.  (Default) Execute `git pull --rebase origin <base-branch>` to pull latest code.
        3.  Execute `git checkout -b <new-branch-name>` to create and switch.
    *   **`--local` option**: If `--local` flag is added, skip step 2's `pull --rebase`, directly create new branch based on local base branch state. Suitable for offline or when wanting to start from specific local commit point.
    *   **Examples:**
        *   `gw start feature/user-login` (create from latest main branch)
        *   `gw start hotfix/issue-123 develop` (create from `develop` branch)
        *   `gw start quick-test --local` (create from local latest main branch, no pull)

2.  **`gw save [-m "message"] [-e] [files...]`**: **Save development progress**
    *   **Purpose:** Quickly add changes and commit.
    *   **Flow:**
        1.  Execute `git add <files>` (if files specified) or `git add -A` (if no files specified).
        2.  Execute commit operation:
            *   **Default behavior (no `-m` or `-e`)**: Print a temporary `COMMIT_EDITMSG` file path. You need to **open this file in your editor (like VS Code / Cursor)**, input commit message and save. Then return to terminal and press **Enter**, `gw` will use your edited message to complete commit.
            *   Using `-m "commit message"`: Directly use provided message for commit, skip editor.
            *   Using `-e`: Force open Git configured default command line editor (like Vim, Nano) to input commit message.
    *   **Examples:**
        *   `gw save` (add all changes, pause waiting for COMMIT_EDITMSG edit)
        *   `gw save README.md src/utils.js` (add specified files, pause waiting for edit)
        *   `gw save -m "fix login button style"` (add all changes, direct commit)
        *   `gw save -e src/api.js` (add specified files, open command line editor)

3.  **`gw update`**: **Sync development branch**
    *   **Purpose:** Integrate latest changes from main branch into your current development branch, keep in sync, reduce final merge conflicts.
    *   **Flow:** Stash local changes (if any) -> switch to main branch -> pull latest code (`git pull`) -> switch back to original branch -> rebase (`git rebase`) -> try to restore stash.
    *   **Note:** If conflicts occur during rebase process, script will stop and prompt you to resolve manually.

4.  **`gw submit [-n|--no-switch]`**: **Complete branch development, prepare PR/MR**
    *   **Purpose:** Complete current branch development work, push it to remote repository, prepare for creating Pull Request or Merge Request.
    *   **Flow:** Check uncommitted changes (prompt to handle) -> push current branch to remote (`git push`, auto-handle first push `-u` option) -> **default ask** whether to switch back to main branch and update -> (if using `-n` or `--no-switch` parameter, **skip** switch step).
    *   **Key:** After this command executes successfully, you need to **manually** go to code hosting platform (GitHub/GitLab) to create PR/MR.

5.  **`gw main | master [...]`**: **Push main branch**
    *   **Purpose:** Explicitly push main branch (`master` or `main`) to remote repository. Mainly used for main branch maintenance.
    *   **Note:** Can append `git push` parameters, like `gw main -f` for force push (use with caution).

6.  **`gw clean <branch-name>`**: **Clean merged branches**
    *   **Purpose:** Automate cleanup of merged feature branches.
    *   **Flow:** Switch to main branch -> pull latest code -> delete specified local branch -> ask and delete corresponding remote branch.
    *   **Recommended:** Use this command after PR/MR is merged for cleanup.

## Typical Developer Workflow Example

Suppose you want to develop a new feature "add user avatar":

1.  **Start:** (ensure on main branch and latest)
    ```bash
    gw checkout master && gw pull # or gw checkout main && gw pull
    gw start feature/avatar
    ```
2.  **Develop & Save:** (small commits)
    ```bash
    # ... write code ...
    gw save -m "WIP: Add avatar component structure"
    # ... write code ...
    gw save src/avatar.css src/avatar.tsx # open editor to write commit message
    # ... write code ...
    gw save -m "feat: implement image upload logic"
    ```
3.  **Keep in sync (optional, recommended):** (regularly sync with main branch)
    ```bash
    gw update
    # (if conflicts occur, resolve manually then git add . && git rebase --continue)
    ```
4.  **Complete & Prepare PR:**
    ```bash
    gw submit
    # (then go to GitHub/GitLab to create PR)
    ```
5.  **Cleanup after PR merged:**
    ```bash
    # (ensure PR is merged)
    gw clean feature/avatar
    ```

## Other Common Git Operations

`gw` also wraps other common Git commands, adding prompts or safety:

*   **`gw status [-r] [-l]`**: View status (default pure local, `-r` get remote, `-l` show log).
*   **`gw add [files...]`**: Add files (no parameters for interactive).
*   **`gw add-all`**: Add all changes (`git add -A`).
*   **`gw commit [-m "message"] [-a]`**: Commit (no `-m` opens editor, `-a` adds tracked files).
*   **`gw pull [...]`**: Pull remote updates (with retry).
*   **`gw fetch [...]`**: Fetch remote updates, no merge.
*   **`gw branch [...]`**: Manage branches (usage similar to `git branch`).
*   **`gw checkout <branch-name>`**: Switch branches.
*   **`gw merge <source-branch> [...]`**: Merge branches.
*   **`gw rm <branch-name|all> [-f]`**: Delete branches (`all` only on main branch, `-f` force).
*   **`gw log [...]`**: View commit history (with pagination).
*   **`gw diff [...]`**: View differences.
*   **`gw reset [target]`**: (**Dangerous!**) Reset branch (`--hard` mode, with strong confirmation).

## Legacy Command Compatibility

The script also supports legacy numeric command mode (`1`/`first`, `2`, `3`/`other`, `4`/`current`) for specific push scenarios. See `gw help` for details.

## Configuration

Some configuration can be done through environment variables:

*   `MAIN_BRANCH`: Specify main branch name (script auto-detects `master` or `main`, but can force specify).
*   `REMOTE_NAME`: Specify default remote repository name (default `origin`).
*   `MAX_ATTEMPTS`: Maximum retry attempts for push/pull (default 50).
*   `DELAY_SECONDS`: Retry interval seconds for push/pull (default 1).

## Summary

The `gw` script provides a core workflow around `start` -> `save` -> `update` -> `submit` -> `clean`, aimed at simplifying daily Git operations in development. It's recommended to prioritize these core commands and use other auxiliary commands as needed.
