---
description: Must read when adding translation keys or working with i18n
alwaysApply: false
---

# AgentifUI Internationalization Development Standards

## Core Architecture

AgentifUI uses next-intl for internationalization with unified JSON configuration architecture:

- **Default Language**: English (en-US) as source language
- **Supported Languages**: 10 languages (zh-CN, en-US, es-ES, zh-TW, ja-JP, de-DE, fr-FR, ru-RU, it-IT, pt-PT)
- **Framework**: next-intl with Next.js 15 App Router
- **Validation Tools**: Python scripts wrapped in pnpm scripts for structural consistency validation

## Directory Structure

```
messages/
├── en-US.json        # English (primary language)
├── zh-CN.json        # Simplified Chinese
├── es-ES.json        # Spanish
├── zh-TW.json        # Traditional Chinese
├── ja-JP.json        # Japanese
├── de-DE.json        # German
├── fr-FR.json        # French
├── ru-RU.json        # Russian
├── it-IT.json        # Italian
└── pt-PT.json        # Portuguese

i18n/
└── request.ts        # next-intl configuration
```

## Validation Tools

The project provides i18n validation tool chain:

```bash
# Quick structural consistency check
pnpm run i18n:check

# Detailed validation (includes more checks)
pnpm run i18n:validate

# Detect missing keys (shows line number positions)
pnpm run i18n:detect
```

## Development Workflow

### 1. Adding New Translation Keys (MANDATORY PROCESS)

**Step 1**: Add key to `messages/en-US.json` first (source language)
**Step 2**: Add same structure to all 9 other language files
**Step 3**: Run validation immediately

```bash
pnpm run i18n:check
```

### 2. Component Usage

```tsx
import { useTranslations } from 'next-intl';

const Component = () => {
  const t = useTranslations('pages.admin.feature');
  return <h1>{t('title')}</h1>;
};
```

## Naming Structure

### Hierarchical Organization
```json
{
  "common": { "ui": {...} },        // Common UI elements
  "pages": { "admin": {...} },      // Page-specific content
  "components": { "sidebar": {...} } // Reusable components
}
```

### Parameterized Translations
```json
{ "welcome": "Welcome {name} to AgentifUI" }
```

## Validation Commands

```bash
# Quick check
pnpm run i18n:check

# Detailed validation  
pnpm run i18n:validate

# Detect missing keys
pnpm run i18n:detect
```

## Core Rules

1. **🚫 NO HARDCODING**: MUST NOT hardcode any user-visible text
2. **✅ STRUCTURE CONSISTENCY**: MUST maintain identical key structure across all language files
3. **🔍 IMMEDIATE VALIDATION**: MUST run validation scripts after each modification
4. **📝 Clear Naming**: MUST use descriptive key names and hierarchical structure
5. **🎯 Functional Grouping**: MUST organize translation keys by functional domains
