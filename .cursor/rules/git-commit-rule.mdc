---
description: Must read before making any git commits or writing commit messages
alwaysApply: false
---

# Git Commit Standards

## Basic Format

```
<type>(<scope>): <subject>

[body]

[footer]
```

## Type (MANDATORY)

- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation update
- **style**: Code formatting (no functional impact)
- **refactor**: Code refactoring
- **perf**: Performance optimization
- **test**: Test-related changes
- **chore**: Build tools, dependencies, etc.

## Scope (MANDATORY)

- **api**: Backend API related
- **ui**: Common UI components
- **chat**: Chat functionality
- **sidebar**: Sidebar
- **auth**: Authentication/authorization
- **admin**: Admin panel
- **workflow**: Workflow
- **mobile**: Mobile adaptation
- **db**: Database related
- **config**: Configuration files
- **deps**: Dependency updates
- **core**: Core functionality
- **all**: Multiple modules

## Subject (MANDATORY)

- MUST use English description
- MUST start with a verb
- MUST NOT exceed 50 characters
- MUST NOT end with a period
- MUST use imperative mood (e.g., "add..." not "added...")

## Examples

### Simple Commits
```bash
git commit -m "feat(chat): add message streaming functionality"
git commit -m "fix(ui): fix button style issue"
git commit -m "docs: update API documentation"
```

### Complex Commits
```bash
git commit -m "feat(auth): refactor user authentication system" \
           -m "" \
           -m "Upgrade to new authentication architecture providing better security." \
           -m "" \
           -m "BREAKING CHANGE: Old authentication tokens will no longer be valid."
```

### High-Risk Commits
For core functionality changes that may need rollback, add risk markers:
```bash
git commit -m "fix(core): enhance state management - RISKY_REVERT_CANDIDATE"
```

## Best Practices

1. **Clear Description**: MUST clearly explain what changed
2. **Atomic Commits**: MUST contain only one logical change per commit
3. **Timely Commits**: MUST commit after completing each feature, avoid bulk commits
4. **English Description**: MUST use English for all commit messages



- MUST focus on what changed and why
- MUST use proper grammar and spelling


