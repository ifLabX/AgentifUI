---
description: if I tell you commit to the git,you should follow this rule
globs: 
alwaysApply: false
---
# Git Commit Rule

## Commit Mode Selection

### Simple Mode (Recommended for simple changes)
Single-line commits, suitable for:
- Simple bug fixes
- Small feature additions
- Dependency updates
- Documentation updates
- Style adjustments

### Detailed Mode (For complex changes)
Multi-line commits, suitable for:
- Complex new features
- Major refactoring
- Breaking changes
- Important fixes requiring detailed explanation

## Simple Mode Format

```
<type>(<scope>): <subject in English>
```

### Simple Mode Examples
```bash
git commit -m "feat(api): add user login API"
git commit -m "fix(ui): fix button style issue"
git commit -m "feat(chat): add message sending functionality"
git commit -m "fix(sidebar): fix mobile display issue"
git commit -m "chore(deps): update React version"
git commit -m "docs: update configuration documentation"
git commit -m "refactor(auth): optimize authentication logic"
git commit -m "perf(api): improve query performance"
```

## Detailed Mode Format

```
<type>(<scope>): <subject in English>

<body in English> (optional)

<footer> (optional)
```

### Detailed Mode Examples
```bash
git commit -m "feat(api): add user authentication API endpoints" \
           -m "" \
           -m "Implement JWT-based authentication mechanism supporting user login and token refresh functionality." \
           -m "Added corresponding unit tests and documentation." \
           -m "" \
           -m "Closes #123"
```

### Breaking Changes Example
```bash
git commit -m "feat(auth): refactor user authentication system" \
           -m "" \
           -m "Upgrade to new authentication architecture providing better security and performance." \
           -m "" \
           -m "BREAKING CHANGE: Old authentication tokens will no longer be valid, users need to log in again."
```

## High-Risk Commits

For commits that modify core functionality and may need to be reverted:

### Risk Flag
- **RISKY_REVERT_CANDIDATE**: Add this flag to subject line for high-risk commits that may require rollback

### High-Risk Example
```bash
git commit -m "fix(core): enhance state management - RISKY_REVERT_CANDIDATE" \
           -m "" \
           -m "Core state management changes that may cause unexpected behavior." \
           -m "REVERT: git revert HEAD if issues occur"
```

## Types

- **feat**: New features or enhancements
- **fix**: Bug fixes
- **docs**: Documentation-only changes
- **style**: Formatting, missing semicolons, etc.
- **refactor**: Code changes that neither fix bugs nor add features
- **perf**: Performance improvements
- **test**: Adding or correcting tests
- **chore**: Build process, auxiliary tools, libraries, etc.
- **revert**: Reverting previous commits

## Scope (Optional)

- **api**: Backend API-related changes
- **ui**: Generic UI components (buttons, inputs, etc.)
- **chat**: Chat-related components and functionality
- **sidebar**: Sidebar components and navigation
- **auth**: Authentication/authorization components and logic
- **admin**: Admin panel components
- **workflow**: Workflow-related components
- **settings**: Settings and configuration components
- **mobile**: Mobile-specific components and responsive design
- **embed**: Embedded components and integrations
- **nav**: Navigation components (nav-bar, etc.)
- **home**: Home page components
- **db**: Database-related changes
- **config**: Configuration changes
- **deps**: Dependency updates
- **core**: Core functionality
- **route**: Route changes
- **hooks**: Custom React hooks
- **store**: State management (Zustand stores)
- **utils**: Utility functions and helpers
- **types**: TypeScript type definitions
- **style**: Styles and CSS changes
- **all**: Multiple parts of the codebase

## Subject Rules

- Use English description
- Start with a verb
- No period at the end
- Maximum 50 characters
- Use imperative present tense (e.g., "add..." not "added...")

## Detailed Mode Format Rules

- **First `-m`**: Main commit message (type, scope, subject)
- **Second `-m`**: Empty string `""` for blank line between subject and body
- **Subsequent `-m`**: Detailed explanation, reasons, impact
- **Last `-m`**: Footer information (issue references, breaking changes)

## Scope Selection Guide

- **Component-specific**: Use specific scope for changes to specific components (chat, sidebar, auth)
- **Generic UI**: Use `ui` for reusable UI components (buttons, inputs, modals)
- **Cross-component**: Use `core` for changes affecting multiple components
- **Infrastructure**: Use `config`, `deps`, `utils` for non-functional changes
- **Multiple areas**: Use `all` for changes spanning multiple unrelated areas

## English Language Guidelines

- Use clear and concise English
- Avoid unnecessary technical jargon
- Start with action verbs
- Focus on what changed and why
- Use proper grammar and spelling


