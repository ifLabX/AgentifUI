---
description: Must read when writing tests or working with testing framework
alwaysApply: false
---

# AgentifUI Testing Development Standards

## Core Architecture

AgentifUI uses Jest with React Testing Library for comprehensive testing:

- **Testing Framework**: Jest with Next.js integration
- **Component Testing**: React Testing Library with jsdom environment
- **Test Patterns**: `*.test.{ts,tsx}` or `*.spec.{ts,tsx}` or `__tests__/` directory
- **Coverage**: Currently 0% threshold (temporary, to be increased)
- **Automation**: Husky handles precommit testing automatically

## Test Configuration

```
jest.config.js         # Main Jest configuration
jest.setup.js          # Test environment setup and mocks
__tests__/             # Test files directory
**/*.test.{ts,tsx}     # Inline test files
```

## Available Commands

```bash
# Run all tests
pnpm test

# Run tests in watch mode
pnpm test:watch

# Run tests with coverage
pnpm test:coverage

# Run tests for CI (no watch, with coverage)
pnpm test:ci
```

## Development Workflow

### 1. Writing Tests (RECOMMENDED PROCESS)

**Step 1**: Create test file alongside component or in `__tests__/` directory
**Step 2**: Use React Testing Library for component testing
**Step 3**: Follow existing mocking patterns from `jest.setup.js`

### 2. Test Structure

```tsx
import { render, screen } from '@testing-library/react';
import { ComponentName } from '../component-path';

describe('ComponentName', () => {
  test('should render correctly', () => {
    render(<ComponentName />);
    expect(screen.getByText('Expected Text')).toBeInTheDocument();
  });
});
```

## Mocking Setup

Pre-configured mocks in `jest.setup.js`:
- Next.js router and navigation
- next/image and next/link
- next-intl translations
- Global browser APIs (IntersectionObserver, ResizeObserver)

## Core Rules

1. **🧪 TEST COVERAGE**: SHOULD write tests for new components and critical logic
2. **🔧 USE MOCKS**: MUST use existing mocks from jest.setup.js
3. **📝 DESCRIPTIVE NAMES**: MUST use clear test descriptions
4. **⚡ AUTOMATION**: Tests run automatically via Husky precommit hooks
5. **🎯 FOCUSED TESTING**: Focus on user behavior rather than implementation details