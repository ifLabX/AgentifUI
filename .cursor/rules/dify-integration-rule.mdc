---
alwaysApply: false
---

# Dify API Integration Development Standards

## Core Principle: Separation of Concerns

Dify API integration uses a 3-layer architecture:

### 1. Proxy Layer (Backend Proxy)
- **Location**: `app/api/dify/[appId]/[...slug]/route.ts`
- **Responsibility**: Authentication, request forwarding, response proxying
- **Principle**: MUST NOT handle business logic, only secure forwarding

### 2. Service Layer (Service Layer)
- **Location**: `lib/services/dify/*.ts` (organized by functional domain)
- **Responsibility**: Business logic, API calls, data processing
- **Principle**: MUST NOT handle authentication details, only call proxy layer

### 3. Type Layer (Type Definitions)
- **Location**: `lib/services/dify/types.ts`
- **Responsibility**: Unified definition of all TypeScript data structures
- **Principle**: MUST serve as data contract for service layer

## Development Flow for New Dify API

### Step 1: Define Types
Add request and response TypeScript interfaces in `types.ts`

### Step 2: Choose/Create Service File
Select appropriate service file based on functional domain, or create new service file

### Step 3: Implement Service Function
```typescript
export async function newDifyFunction(
  appId: string,
  payload: RequestType
): Promise<ResponseType> {
  const slug = 'api/path';
  const apiUrl = `/api/dify/${appId}/${slug}`;
  
  const response = await fetch(apiUrl, {
    method: 'POST',
    body: JSON.stringify(payload),
    headers: { 'Content-Type': 'application/json' }
  });
  
  if (!response.ok) {
    throw new Error(`API call failed: ${response.statusText}`);
  }
  
  return response.json();
}
```

### Step 4: Frontend Usage
```typescript
import { newDifyFunction } from '@lib/services/dify/service-name';

// Use in component or Hook
const result = await newDifyFunction(appId, params);
```

## Core Advantages

- **Clarity**: Responsibility separation, code easy to understand
- **Modularity**: Organized by functional domain, building-block composition
- **Low Coupling**: Independent layers, minimal impact from changes
- **Easy Maintenance**: Accurate problem location, centralized configuration modification
- **Scalability**: Standardized development process for new features

## Development Requirements

When developing Dify-related features, MUST strictly follow this standard. This ensures:

- **Maintainability**: Easier to locate and fix issues, configuration changes (like API Key) only need modification in one place (proxy layer)
- **Scalability**: Adding new features only requires creating new types and service functions according to the process, minimal impact on existing code