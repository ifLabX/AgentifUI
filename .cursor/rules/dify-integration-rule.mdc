---
description: 
globs: app/api/dify/**/route.ts,lib/services/dify/**/*.ts,lib/hooks/use-*.ts
alwaysApply: false
---
# Dify API Integration Standards and Development Guide

This document defines best practices and development processes for integrating Dify API in the AgentifUI project, aiming to ensure code clarity, modularity, low coupling, and easy maintenance and extension.

## Core Principle: Separation of Concerns

To achieve clear architecture, we divide the Dify API integration logic into three main layers:

1.  **Next.js API Routes (Backend Proxy)**:
    *   **Location**: `app/api/dify/[appId]/[...slug]/route.ts`
    *   **Responsibilities**:
        *   Receive requests from frontend Service layer.
        *   Based on `appId` in request path, securely obtain corresponding Dify API Base URL and API Key from configuration sources (environment variables, database, etc.).
        *   **Execute Authentication**: Add `Authorization: Bearer {apiKey}` to request headers.
        *   Transparently **forward** requests to real Dify API endpoints.
        *   **Forward** Dify API responses (including streaming responses, JSON, files, etc.) back to frontend Service layer.
        *   Handle basic HTTP details and CORS configuration.
    *   **Key Point**: Does not care about specific business logic (whether chat or file upload), only responsible for authentication and forwarding.

2.  **Dify Service Layer (Frontend Services)**:
    *   **Location**: `lib/services/dify/*.ts` (divided by functional domains, such as `chat-service.ts`, `file-service.ts`, etc.)
    *   **Responsibilities**:
        *   Define API call functions related to specific Dify functional domains.
        *   Based on interface definitions in `types.ts`, construct request body (`payload`) sent to **backend proxy**.
        *   Know which Dify functionality to call (corresponding to `slug` in proxy URL).
        *   Call **backend proxy** URL (format: `/api/dify/{appId}/{slug}`), **never directly call Dify API**.
        *   Handle responses returned by **backend proxy** (parse JSON, handle streams, format data, error handling).
        *   Provide concise, typed, business-logic-related interfaces to upper layers (React Hooks or components).
    *   **Key Point**: Does not care about authentication details (API Key/URL), only focuses on business logic and interaction with proxy.

3.  **Dify Type Definitions**:
    *   **Location**: `lib/services/dify/types.ts`
    *   **Responsibilities**:
        *   Define all TypeScript data structures, request body interfaces, response body interfaces (including SSE events) related to Dify API interaction.
        *   Serve as "contract" for data format between Service layer and (possible) Hook layer.
    *   **Key Point**: All Dify-related data structures should be uniformly defined in this file to maintain consistency.

## How to Add New Dify API Integration (Subsequent Development Process)

Follow these steps to clearly add new Dify functionality support in a "building blocks" manner:

1.  **Step 1: Define Types (types.ts)**
    *   Consult Dify API documentation to understand request parameters and response structure of new API.
    *   In `lib/services/dify/types.ts` file, add corresponding TypeScript interfaces or type aliases for new request body and response body (including possible SSE events).

2.  **Step 2: Choose or Create Service File (lib/services/dify/)**
    *   Based on **functional domain** of new API (e.g., file processing, app management, dataset operations, etc.), determine which Service file it should belong to.
    *   If no suitable Service file exists, create a new file in `lib/services/dify/` directory, e.g., `file-service.ts` or `app-service.ts`.
    *   **Maintain Single Responsibility**: Each Service file should focus on a specific functional domain.

3.  **Step 3: Implement Service Function (*-service.ts)**
    *   In selected Service file, create a new async function to call that Dify API.
    *   **Function Signature**: Accept necessary parameters, such as `appId`, `user` identifier, and data specific to that API (like file objects, query parameters, etc.). Return a Promise whose type should conform to response type defined in `types.ts`.
    *   **Construct Payload**: Use passed parameters and interfaces in `types.ts` to build request body sent to **backend proxy**.
    *   **Determine Slug**: Clarify the Dify path corresponding to this API, which will be part of **backend proxy** URL (`slug`).
    *   **Call Proxy**: Use `fetch` to call backend proxy URL, format: `` `/api/dify/${appId}/${slug}` ``. Ensure correct HTTP method (`method`) and request body (`body`) are passed. **Do not add `Authorization` header, this is proxy's responsibility.**
    *   **Handle Response**:
        *   Check `response.ok` status.
        *   Handle `response.body` based on expected response type (JSON, text/event-stream, audio/*, etc.).
        *   Use types defined in `types.ts` to parse and return data.
        *   Implement robust error handling logic, throw or return clear error messages to upper layers.
    *   **Example (Pseudo-code)**:
        ```typescript
        // lib/services/dify/file-service.ts
        import type { DifyFileUploadPayload, DifyFileUploadResponse } from './types';

        export async function uploadDifyFile(
          appId: string,
          payload: DifyFileUploadPayload // Use type defined in types.ts
        ): Promise<DifyFileUploadResponse> { // Return type also from types.ts
          const slug = 'files/upload'; // Dify API path
          const apiUrl = `/api/dify/${appId}/${slug}`; // Point to backend proxy

          try {
            const response = await fetch(apiUrl, {
              method: 'POST',
              // Body usually FormData, proxy will handle
              body: payload.formData, // Assume payload contains FormData
              // No need for Content-Type and Authorization
            });

            if (!response.ok) {
              // Handle error response...
              throw new Error(`Failed to upload file: ${response.statusText}`);
            }

            const result: DifyFileUploadResponse = await response.json();
            return result; // Return result conforming to type definition

          } catch (error) {
            console.error('[Dify File Service] Upload failed:', error);
            throw error; // Re-throw error
          }
        }
        ```

4.  **Step 4: (Usually Not Needed) Check/Update Backend Proxy (route.ts)**
    *   In most cases, existing proxy (`app/api/dify/[appId]/[...slug]/route.ts`) is already generic enough and needs no modification.
    *   **Only in special cases** need to check or update:
        *   If new API needs special request headers (besides `Authorization` and `Content-Type`).
        *   If new API returns a special `Content-Type` that proxy hasn't handled yet.
        *   If new API needs specific CORS configuration.

5.  **Step 5: Frontend Usage**
    *   In frontend components or Hooks that need to use that Dify functionality:
    *   Import the newly created function from corresponding Service file.
    *   Call that function and handle its returned Promise (success or failure).
    *   Update UI state as needed.

## Benefits

Following this standard will bring:

*   **Clarity**: Each part has clear responsibilities, code is easy to understand.
*   **Modularity**: Functions are divided by domain into different Service files, composable like building blocks.
*   **Low Coupling**: Service layer doesn't depend on authentication details, proxy layer doesn't depend on business logic, changes have minimal impact scope.
*   **Maintainability**: Easier to locate and fix issues, changing configuration (like API Key) only requires changing one place (proxy layer).
*   **Extensibility**: Adding new functionality only requires following the process to create new types and Service functions, minimal impact on existing code.

Please strictly follow this standard when developing Dify-related functionality in the future.
